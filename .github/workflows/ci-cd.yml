name: CI/CD Pipeline

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: profile_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the Git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Java toolchain
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Add gradlew permission
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/profile_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create the target directory if it doesn't exist
            mkdir -p ${{ secrets.TARGET_DIR }}
            
            # Clone the repository
            cd ${{ secrets.TARGET_DIR }}
            if [ -d ".git" ]; then
              git pull
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Install Docker if not already installed
            if ! [ -x "$(command -v docker)" ]; then
              echo 'Installing Docker...'
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            
              # Add Docker's official GPG key
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
              # Set up the Docker repository
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            fi
            
            # Check if docker-compose exists, if not use docker compose plugin
            if ! [ -x "$(command -v docker-compose)" ]; then
              echo 'Using Docker Compose plugin...'
            
              # Check if docker compose plugin is installed
              if ! docker compose version > /dev/null 2>&1; then
                echo 'Installing Docker Compose plugin...'
                sudo apt-get update
                sudo apt-get install -y docker-compose-plugin
              fi
            
              # Build and start containers with plugin syntax
              sudo docker compose down || true
              sudo docker compose build --no-cache
              sudo docker compose up -d
            
              # Show logs to verify deployment
              sudo docker compose logs
            else
              # Build and start containers with traditional syntax
              sudo docker-compose down || true
              sudo docker-compose build --no-cache
              sudo docker-compose up -d
            
              # Show logs to verify deployment
              sudo docker-compose logs
            fi